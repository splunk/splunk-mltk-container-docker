ARG BASE_IMAGE
FROM ${BASE_IMAGE}
ARG TAG
ARG REQUIREMENTS_PYTHON_BASE
ARG REQUIREMENTS_PYTHON_SPECIFIC

# setup environment
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /dltk/.local/bin:/dltk/.local/lib/python3.9/site-packages/:$PATH
ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC 

# install nodejs + other packages
# nodejs from source
RUN curl -fsSL https://deb.nodesource.com/setup_current.x | bash -
# nodejs and other from apt package repos
RUN apt-get update --fix-missing && apt-get install -y wget bzip2 git ca-certificates nodejs build-essential python3 python3-pip

# update everything
RUN apt-get update && apt-get upgrade -y

# configure file system
WORKDIR /srv
RUN mkdir /dltk

# install base python requirements
COPY ./requirements_files/${REQUIREMENTS_PYTHON_BASE} /dltk/${REQUIREMENTS_PYTHON_BASE}
RUN pip3 install --no-cache-dir --upgrade -r /dltk/${REQUIREMENTS_PYTHON_BASE}

# install specific python requirements
COPY ./requirements_files/${REQUIREMENTS_PYTHON_SPECIFIC} /dltk/${REQUIREMENTS_PYTHON_SPECIFIC}
RUN pip3 install --no-cache-dir --upgrade -r /dltk/${REQUIREMENTS_PYTHON_SPECIFIC}

# configure spacy if it was installed
RUN if pip3 freeze | grep -q spacy;\
    then echo 'Spacy is installed, downloading language file...';\
    python3 -m spacy download en_core_web_sm;\
    else echo 'Spacy is not installed'; fi

# creating new self signed certs
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout dltk.key -out dltk.pem -subj="/CN=dsdl"
RUN mkdir /dltk/.jupyter/; mv dltk.key /dltk/.jupyter/dltk.key; mv dltk.pem /dltk/.jupyter/dltk.pem

# Copy bootstrap entry point script
COPY ./bootstrap_scripts/bootstrap_transformers.sh /dltk/
COPY app /dltk/app
COPY notebooks /dltk/notebooks

# copy and expand transformer content
ADD basemodels/class_en.tar.gz /dltk/app/model/data/classification/en
ADD basemodels/class_jp.tar.gz /dltk/app/model/data/classification/jp
ADD basemodels/sum_en.tar.gz /dltk/app/model/data/summarization/en
ADD basemodels/sum_jp.tar.gz /dltk/app/model/data/summarization/jp

RUN ls -lah /dltk/app/model/data/classification/en/
RUN mkdir /dltk/app/model/data/classification/en/bert_phishing
ADD basemodels/pytorch_model.tar.gz /dltk/app/model/data/classification/en/bert_phishing

# Install local DSDL supporting functions
RUN mkdir /dltk/packages
COPY package-dsdlsupport/dist/dsdlsupport-1.0.0.tar.gz /dltk/packages/dsdlsupport-1.0.0.tar.gz
RUN pip install /dltk/packages/dsdlsupport-1.0.0.tar.gz

# Copy jupyter config
COPY config/jupyter_notebook_config.py /dltk/.jupyter/jupyter_notebook_config.py

# Since JupyterLab 3 jupyter server config needs to be set
COPY config/jupyter_server_config.py /dltk/.jupyter/jupyter_server_config.py

# Copy jupyter notebook conversion template to export python module
COPY config/jupyter_notebook_template.tpl /dltk/.jupyter/jupyter_notebook_conversion.tpl
COPY config/null.tpl /dltk/.jupyter/null.tpl

# Handle user rights
RUN chgrp -R 0 /dltk && \
    chmod -R g=u /dltk
RUN chgrp -R 0 /srv && \
    chmod -R g=u /srv
RUN chmod g+w /etc/passwd
USER 1001

# Expose container port 5000 (MLTK Container Service) and 8888 (Notebook)
EXPOSE 5000 8888
# Define bootstrap as entry point to start container
ENTRYPOINT ["/dltk/bootstrap_transformers.sh"]
