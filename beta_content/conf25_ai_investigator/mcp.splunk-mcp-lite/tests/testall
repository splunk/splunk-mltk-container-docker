#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BOLD='\033[1m'
RESET='\033[0m'

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Load environment variables from .env
if [ -f "../.env" ]; then
    export $(cat ../.env | grep -v '^#' | xargs)
fi

# Get ports from environment
SSE_PORT="${MCP_SERVER_SSE_PORT:-7008}"
STREAMABLE_PORT="${MCP_SERVER_STREAMABLE_HTTP_PORT:-7009}"

# Get local and external URLs
LOCAL_SSE_URL="http://localhost:${SSE_PORT}/sse"
LOCAL_STREAMABLE_URL="http://localhost:${STREAMABLE_PORT}/mcp/"
EXTERNAL_MCP_URL="${MCP_SERVER_HOST_EXTERNAL_URL:-}"

# Check if running in auto mode
AUTO_MODE=false
AUTO_CHOICE=""
if [ $# -eq 1 ] && [[ "$1" =~ ^[0-9]+$ ]]; then
    AUTO_MODE=true
    AUTO_CHOICE=$1
    # Check if trying to run interactive test
    if [[ "$AUTO_CHOICE" =~ ^(4|11)$ ]]; then
        echo -e "${RED}Error: Interactive options cannot be run in automatic mode${RESET}"
        exit 1
    fi
fi

# Function to check if MCP server is running
check_mcp_server() {
    local transport=$1
    local is_remote=${2:-false}
    
    if [ "$is_remote" = true ]; then
        echo -n "Checking if remote MCP server is accessible at $EXTERNAL_MCP_URL... "
        # For streamable HTTP, just check if the URL is reachable
        if timeout 5 curl -s -I "$EXTERNAL_MCP_URL" 2>/dev/null | grep -q "HTTP"; then
            echo -e "${GREEN}✓ Remote server is accessible${RESET}"
            return 0
        else
            echo -e "${RED}✗ Remote server not accessible${RESET}"
            echo -e "${YELLOW}Please ensure the remote server is running and accessible${RESET}"
            return 1
        fi
    else
        case $transport in
            sse)
                echo -n "Checking if SSE server is running on port $SSE_PORT... "
                if timeout 2 curl -s -I "$LOCAL_SSE_URL" 2>/dev/null | grep -q "text/event-stream"; then
                    echo -e "${GREEN}✓ Server is running${RESET}"
                    return 0
                else
                    echo -e "${RED}✗ Server not found${RESET}"
                    echo -e "${YELLOW}Please start the SSE server:${RESET}"
                    echo "  cd ../  # Go to project directory"
                    echo "  ./dock status  # Check docker status"
                    echo "  ./dock restart  # or: MCP_SERVER_TRANSPORT=sse python server.py"
                    return 1
                fi
                ;;
            streamable-http)
                echo -n "Checking if Streamable HTTP server is running on port $STREAMABLE_PORT... "
                # For streamable HTTP, check if we get an error response (meaning server is up)
                if timeout 2 curl -s "$LOCAL_STREAMABLE_URL" 2>/dev/null | grep -q "jsonrpc"; then
                    echo -e "${GREEN}✓ Server is running${RESET}"
                    return 0
                else
                    echo -e "${RED}✗ Server not found${RESET}"
                    echo -e "${YELLOW}Please start the Streamable HTTP server:${RESET}"
                    echo "  cd ../  # Go to project directory"
                    echo "  ./dock status  # Check docker status"
                    echo "  ./dock restart  # or: MCP_SERVER_TRANSPORT=streamable-http python server.py"
                    return 1
                fi
                ;;
            *)
                echo -e "${RED}Unknown transport: $transport${RESET}"
                return 1
                ;;
        esac
    fi
}

# Function to check Splunk connectivity
check_splunk_connection() {
    echo -n "Checking Splunk connection... "
    # Create a simple Python script to test Splunk connection
    python3 -c "
import os
import sys
sys.path.insert(0, '..')
try:
    from splunk_client import SplunkClient
    client = SplunkClient()
    if client.test_connection():
        print('\033[0;32m✓ Connected to Splunk\033[0m')
        sys.exit(0)
    else:
        print('\033[0;31m✗ Cannot connect to Splunk\033[0m')
        sys.exit(1)
except Exception as e:
    print(f'\033[0;31m✗ Error: {e}\033[0m')
    sys.exit(1)
" 2>/dev/null
    return $?
}

# Function to display menu
show_menu() {
    clear
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════${RESET}"
    echo -e "${BOLD}${CYAN}        Splunk MCP Lite Test Suite - testall           ${RESET}"
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════${RESET}"
    
    # Show server status
    echo -e "\n${BOLD}Server Status:${RESET}"
    echo -n "  SSE Server (port $SSE_PORT): "
    if timeout 1 curl -s -I "$LOCAL_SSE_URL" 2>/dev/null | grep -q "text/event-stream"; then
        echo -e "${GREEN}✓ Running${RESET}"
    else
        echo -e "${RED}✗ Not running${RESET}"
    fi
    
    echo -n "  Streamable HTTP (port $STREAMABLE_PORT): "
    if timeout 1 curl -s "$LOCAL_STREAMABLE_URL" 2>/dev/null | grep -q "capabilities"; then
        echo -e "${GREEN}✓ Running${RESET}"
    else
        echo -e "${RED}✗ Not running${RESET}"
    fi
    
    echo -n "  Splunk Connection: "
    if check_splunk_connection >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Connected${RESET}"
    else
        echo -e "${RED}✗ Not connected${RESET}"
    fi
    
    echo -e "\n${BOLD}Local Tests:${RESET}"
    echo -e "  ${GREEN}1${RESET}) Test Stdio Transport              - Spawn server in stdio mode"
    echo -e "  ${GREEN}2${RESET}) Test SSE Transport (local)        - Test SSE on port $SSE_PORT"
    echo -e "  ${GREEN}3${RESET}) Test Streamable HTTP (local)      - Test streamable HTTP on port $STREAMABLE_PORT"
    echo -e "  ${GREEN}4${RESET}) Test Splunk Connection            - Verify Splunk connectivity"
    echo -e "  ${GREEN}5${RESET}) Show MCP Configuration            - Display server config"
    echo -e "  ${GREEN}6${RESET}) Interactive Query Testing         - Run queries interactively"
    
    if [ -n "$EXTERNAL_MCP_URL" ]; then
        echo -e "\n${BOLD}Remote Tests (via ${EXTERNAL_MCP_URL}):${RESET}"
        echo -e "  ${GREEN}7${RESET}) Test Streamable HTTP (remote)    - Test via Cloudflare tunnel"
        echo -e "  ${GREEN}8${RESET}) Interactive Query Testing (remote) - Run queries via remote MCP"
    else
        echo -e "\n${YELLOW}Remote tests not available (MCP_SERVER_HOST_EXTERNAL_URL not set)${RESET}"
    fi
    
    echo -e "\n  ${RED}q${RESET}) Exit (or press ESC)"
    echo
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════${RESET}"
}

# Function to press any key to continue
press_any_key() {
    if [ "$AUTO_MODE" = true ]; then
        return
    fi
    
    echo
    echo -e "${YELLOW}Press any key to return to menu (ESC to exit)...${RESET}"
    # Ensure output is flushed before waiting for input
    exec 1>&1
    read -n 1 -s -r key
    # Check if ESC was pressed (ESC = \033 or decimal 27)
    if [[ $key == $'\033' ]]; then
        echo -e "\n${GREEN}Goodbye!${RESET}"
        exit 0
    fi
}

# Function to run a test and show results
run_test() {
    local test_name=$1
    local test_file=$2
    local use_remote=${3:-false}
    
    echo -e "\n${BOLD}${CYAN}Running $test_name...${RESET}"
    echo -e "${CYAN}════════════════════════════════════════════════${RESET}\n"
    
    if [ "$use_remote" = true ]; then
        # Set environment variable for remote URL
        MCP_TEST_URL="$EXTERNAL_MCP_URL" python "$test_file"
    else
        # Run with default local URL
        python "$test_file"
    fi
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "\n${GREEN}${BOLD}✅ $test_name completed successfully!${RESET}"
    else
        echo -e "\n${RED}${BOLD}❌ $test_name failed with exit code $exit_code${RESET}"
    fi
    
    return $exit_code
}

# Function for interactive query testing
interactive_queries() {
    local use_remote=${1:-false}
    
    echo -e "\n${BOLD}${CYAN}Interactive Query Testing${RESET}"
    echo -e "${CYAN}════════════════════════════════════════════════${RESET}"
    echo -e "${YELLOW}Enter Splunk SPL queries to execute.${RESET}"
    echo -e "${YELLOW}Commands:${RESET}"
    echo -e "${YELLOW}  /q - Return to menu${RESET}\n"
    
    if [ "$use_remote" = true ]; then
        echo -e "${CYAN}Using remote MCP server at: $EXTERNAL_MCP_URL${RESET}\n"
    else
        echo -e "${CYAN}Using local MCP server${RESET}\n"
    fi
    
    # Get the absolute path to the project directory
    PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
    
    # Create a temporary Python script for interactive testing
    cat > /tmp/interactive_splunk_test.py << EOF
import asyncio
import json
import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, "$PROJECT_DIR")

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def interactive_test():
    server_params = StdioServerParameters(
        command="python",
        args=["$PROJECT_DIR/server.py"],
        env={"MCP_SERVER_TRANSPORT": "stdio"}
    )
    
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            
            # Ensure terminal is in proper mode
            import readline  # This enables cursor keys and history
            
            while True:
                try:
                    query = input("\nEnter SPL query > ").strip()
                except KeyboardInterrupt:
                    print("\n\nInterrupted. Type /q to exit.")
                    continue
                except EOFError:
                    break
                    
                if query == '/q':
                    break
                    
                if not query:
                    continue
                
                print("\nExecuting SPL query...")
                try:
                    result = await session.call_tool("search_splunk", arguments={
                        "query": query
                    })
                    
                    # Extract the actual content from the result
                    if hasattr(result, 'content') and result.content:
                        search_result = json.loads(result.content[0].text)
                    else:
                        search_result = result
                    
                    if "error" in search_result:
                        print(f"\n❌ Error: {search_result['error']}")
                    else:
                        print(f"\n✅ Search Results:")
                        print(f"   Status: {search_result.get('status', 'N/A')}")
                        print(f"   Events returned: {search_result.get('event_count', 0)}")
                        print(f"   Job ID: {search_result.get('job_id', 'N/A')}")
                        
                        if search_result.get('events'):
                            print(f"\n   First few events:")
                            for i, event in enumerate(search_result['events'][:3]):
                                print(f"   {i+1}. {json.dumps(event, indent=6)}")
                        
                except Exception as e:
                    print(f"\n❌ Exception: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(interactive_test())
    except KeyboardInterrupt:
        print("\n\nInterrupted by user")
    except Exception as e:
        print(f"\n❌ Error: {e}")
        sys.exit(1)
EOF

    # Save current terminal settings
    stty_save=$(stty -g 2>/dev/null)
    
    # Run the interactive test
    if [ "$use_remote" = true ]; then
        MCP_TEST_URL="$EXTERNAL_MCP_URL" python /tmp/interactive_splunk_test.py
    else
        python /tmp/interactive_splunk_test.py
    fi
    
    # Restore terminal settings
    [ -n "$stty_save" ] && stty "$stty_save"
    
    # Clean up
    rm -f /tmp/interactive_splunk_test.py
}

# Function to show configuration
show_mcp_config() {
    echo -e "\n${BOLD}${CYAN}MCP Server Configuration${RESET}"
    echo -e "${CYAN}════════════════════════════════════════════════${RESET}\n"
    
    # Get the absolute path to the project directory
    PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
    
    # Create a temporary Python script to get config
    cat > /tmp/get_config.py << EOF
import asyncio
import json
import sys
from pathlib import Path

sys.path.insert(0, "$PROJECT_DIR")

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def get_config():
    server_params = StdioServerParameters(
        command="python",
        args=["$PROJECT_DIR/server.py"],
        env={"MCP_SERVER_TRANSPORT": "stdio"}
    )
    
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            # Get server info from initialization
            server_info = session.server_info
            print(json.dumps({
                "name": server_info.name,
                "version": server_info.version,
                "capabilities": {
                    "tools": True if session.available_tools else False,
                    "available_tools": [tool.name for tool in session.available_tools]
                }
            }, indent=2))

if __name__ == "__main__":
    try:
        asyncio.run(get_config())
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
EOF

    python /tmp/get_config.py
    rm -f /tmp/get_config.py
}

# Function to execute a choice
execute_choice() {
    local choice=$1
    
    case $choice in
        1)
            echo -e "\n${YELLOW}Note: This test spawns its own server process in stdio mode${RESET}"
            run_test "Stdio Transport Test" "test_stdio_transport.py" false
            press_any_key
            ;;
            
        2)
            if check_mcp_server "sse" false; then
                run_test "SSE Transport Test (local)" "test_sse_transport.py" false
                press_any_key
            else
                press_any_key
            fi
            ;;
            
        3)
            if check_mcp_server "streamable-http" false; then
                run_test "Streamable HTTP Test (local)" "test_streamable_http.py" false
                press_any_key
            else
                press_any_key
            fi
            ;;
            
        4)
            echo -e "\n${BOLD}${CYAN}Testing Splunk Connection...${RESET}"
            echo -e "${CYAN}════════════════════════════════════════════════${RESET}\n"
            if check_splunk_connection; then
                echo -e "\n${GREEN}${BOLD}✅ Splunk connection test passed!${RESET}"
            else
                echo -e "\n${RED}${BOLD}❌ Splunk connection test failed${RESET}"
            fi
            press_any_key
            ;;
            
        5)
            show_mcp_config
            press_any_key
            ;;
            
        6)
            interactive_queries false
            press_any_key
            ;;
            
        7)
            if [ -n "$EXTERNAL_MCP_URL" ]; then
                if check_mcp_server "streamable-http" true; then
                    run_test "Streamable HTTP Test (remote)" "test_streamable_http.py" true
                    press_any_key
                else
                    press_any_key
                fi
            else
                echo -e "\n${RED}Remote URL not configured${RESET}"
                press_any_key
            fi
            ;;
            
        8)
            if [ -n "$EXTERNAL_MCP_URL" ]; then
                interactive_queries true
                press_any_key
            else
                echo -e "\n${RED}Remote URL not configured${RESET}"
                press_any_key
            fi
            ;;
            
        q|Q)
            echo -e "\n${GREEN}Goodbye!${RESET}"
            exit 0
            ;;
            
        *)
            echo -e "\n${RED}Invalid option. Please try again.${RESET}"
            sleep 1
            ;;
    esac
}

# Main execution
if [ "$AUTO_MODE" = true ]; then
    # Auto mode - run specified test and exit
    echo -e "${BOLD}${CYAN}Running test $AUTO_CHOICE in automatic mode${RESET}"
    execute_choice "$AUTO_CHOICE"
    exit $?
else
    # Interactive mode - show menu loop
    while true; do
        show_menu
        
        echo -n "Select an option: "
        read -n 1 -s -r choice
        
        # Check if ESC was pressed
        if [[ $choice == $'\033' ]]; then
            echo -e "\n${GREEN}Goodbye!${RESET}"
            exit 0
        fi
        
        # Echo the choice for visibility
        echo "$choice"
        
        execute_choice "$choice"
    done
fi
